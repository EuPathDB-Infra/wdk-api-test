#!/usr/bin/env bash

# Modified from: https://gist.github.com/Foxcapades/8c8c80c40b487f09aaf1dca6c5a1a150
trap "exit 1" TERM
export TOP_PID=$$

readonly GITHUB_API_URL="https://api.github.com/repos/"
readonly GITHUB_TARGET="/releases/latest"

readonly TARGET_DIR=".bin"

function makeGhApiUrl() {
  if [ -z "${1}" ]; then
    echo "function makeGhApiUrl called without required project slug parameter.
    Example call: 'makeGhApiUrl Foxcapades/Argonaut'" >&2
    kill -s TERM ${TOP_PID}
  fi

  echo "${GITHUB_API_URL}${1}${GITHUB_TARGET}"
}

function getLatestVersionData() {
  if [ -z "${1}" ]; then
    echo "function getLatestVersionData called without required project slug parameter.
    Example call: 'getLatestVersionData Foxcapades/Argonaut'" >&2
    kill -s TERM ${TOP_PID}
  fi

  fullUrl="$(makeGhApiUrl ${1})"
  curl -sf "${fullUrl}"
  if [ $? -ne 0 ]; then
    echo "Failed to fetch version information from ${fullUrl}" >&2
    kill -s TERM ${TOP_PID}
  fi
}

function parseVersionNumber() {
  if [ -z "${1}" ]; then
    echo "function parseVersionNumber called without required project release data." >&2
    kill -s TERM ${TOP_PID}
  fi

  echo "${1}" | grep "tag_name" | cut -d '"' -f 4
}

function parseReleaseFile() {
  if [ -z "${1}" ]; then
    echo "function parseReleaseFile called without required project release data." >&2
    kill -s TERM ${TOP_PID}
  fi

  echo "${1}" | grep "browser_download_url" | grep "$(os)" | cut -d '"' -f 4
}

function os() {
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    echo "linux"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "darwin"
  else
    echo "Unsupported OS: $OSTYPE" >&2
    kill -s TERM ${TOP_PID}
  fi
}

function versionEquals() {
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo "function versionEquals must be passed 2 parameters containing the versions to check" >&2
    kill -s TERM ${TOP_PID}
  fi

  va="$(sed 's/-.\+//' <<< ${1})"
  vb="$(sed 's/-.\+//' <<< ${2})"
  if [[ "${va}" == "${vb}" ]]; then
    return 0
  fi
  return 1
}

function downloadIfDifferent() {
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo "function downloadIfDifferent must be passed a github project slug and a version number to check against" >&2
    kill -s TERM ${TOP_PID}
  fi

  json="$(getLatestVersionData ${1})"
  if [ -z "${json}" ]; then
    echo "empty github response"
    kill -s TERM ${TOP_PID}
  fi

  vn="$(parseVersionNumber "${json}")"
  if [ -z "${vn}" ]; then
    echo "failed to parse version number from github response json" >&2
    kill -s TERM ${TOP_PID}
  fi

  versionEquals "${vn}" "${2}"

  if [ $? -eq 0 ]; then
    return 0
  fi

  fileUrl="$(parseReleaseFile "${json}")"
  if [ -z "${fileUrl}" ]; then
    echo "failed to parse release file name from github response json" >&2
    kill -s TERM ${TOP_PID}
  fi

  fileName="$(basename ${fileUrl})"

  cd "${TARGET_DIR}"
  wget -q "${fileUrl}" && tar -xzf "${fileName}" && rm "${fileName}"
  cd ..
}

readonly SLUG="VEuPathDB/script-api-test-runner"

if [[ ! -d "${TARGET_DIR}" ]]; then
  mkdir "${TARGET_DIR}"
fi

if [[ -f "${TARGET_DIR}/run" ]]; then
  downloadIfDifferent "${SLUG}" "$(${TARGET_DIR}/run -V)"
else
  downloadIfDifferent "${SLUG}" "v0.0.0"
fi

"${TARGET_DIR}/run" $@
