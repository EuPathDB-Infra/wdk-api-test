#!/bin/bash

# Credentials JSON array
#
# Format:
# [{"email":"login@email.addr","pass":"pa$$w0rd"}]
credentials="$CREDENTIALS"

# Path to the site under test
sitePath="$SITE_PATH"

# QA Auth token
qaAuth="$QA_AUTH"

# Authentication type
#
# Controls what mechanism the tests should expect when
# logging into a site.
authType="OAUTH"

# Test mode flags
gradleFlags=""

# Gradle / JVM Parameters
gradleParams=""

# Gradle tasks to run before test
preSteps=""

# Tags
incTags=""
exTags=""

invalid=0

# Input credential array
credTmp=()

# Sites
SITES=(
  "amoeba"
  "clinepi"
  "crypto"
  "eupath"
  "fungi"
  "giardia"
  "microbiome"
  "microsporidia"
  "orthomcl"
  "piroplasma"
  "plasmo"
  "toxo"
  "trich"
  "tritryp"
)

USER_SPLIT_CHAR=":"

# Splits a given string on the first instance of
# $USER_SPLIT_CHAR.
function splitPairs {
  input="$1"
  echo "${input:?}" | sed "s#${USER_SPLIT_CHAR}# #"
}

# Print a json object with the 2 first input params as
# values to the keys "email" and "pass"
#
# Params: <site-login-email> <site-login-pass>
function pairToJson {
  input=("$@")
  printf '{"email":"%s","pass":"%s"},' "${input[0]}" $(echo -n ${input[1]} | base64)
}

function pairsToJson {
  input=("$@")

  for pair in ${input}; do
    split=$(splitPairs $pair)
    tmp="$tmp$(pairToJson $split)"
  done

  echo "[${tmp::-1}]"
}

# Prints the test runner help text
function printHelp {
  echo "Usage:

  run [args...] [-- gradle args...]

Arguments:

  -a <credentials>      Site login email address and password formatted as:

                            -a {email}$USER_SPLIT_CHAR{password}

                        This can be specified more than once to provide multiple
                        users.  Leaving this out will disable tests that require
                        a user session.  Only specifying one set of credentials
                        will disable tests requiring more than one user.

                        This value can also be specified by setting the
                        CREDENTIALS environment variable to a JSON array of
                        objects containing the login email and password set as
                        the properties \"email\" and \"pass\" respectively.


  -u <site url>         URL of the site which will have it's API tested.  If
                        this value is not provided it will be requested
                        interactively.

                        This value can also be set using the SITE_PATH
                        environment variable.

  -s <test>             Test class or method to run.  Allows wildcard matching
                        with '*'.  Can be specified multiple times to run
                        multiple tests.

  -c                    Clean run.  This runs gradle clean to clear out any
                        remnants of previous builds or test runs.

  -l                    Use legacy login scheme for authentication instead of
                        OAuth.

  -D <value>            Arbitrary JVM params.

  -q                    QA Token.  \"auth_tkt\" value used to bypass the extra
                        login step for QA sites.  This value can be attained by
                        logging into a QA site in a browser and retrieving the
                        \"auth_tkt\" query param given after a successful login.

  -t <tags>             Only run tests annotated with a tag in this comma
                        separated list of tags.

  -T <tags>             Exclude tests annotated with a tag in this comma
                        separated list of tags.

  -h                    Show this help text

Additional Params:

  [gradle args...]        Additional arguments/parameters that will be passed
                          to gradle.

Examples

  Run in interactive mode (or with env vars) and tell gradle to print
  stacktraces:

    run -- --stacktrace

  Run with single login and site:

    run -l -a some@email.addr:abc123 -u http://username.plasmodb.org/plasmo.username

  Run specific tests:

    run -s 'LoginTest' -s '*StepAnalysisTest\$GetAnalysisDetails.invalidUserId'

  Exclude specific tags:

    run -T some,tags,to,exclude

  Run specific tags:

    run -t some,tags,to,run
"
}

# Join the given strings using the first parameter as the
# separator
#
# Params: <separator> <strings>[ additional strings...]
function join {
  separator=$1
  shift
  joined=$(printf "$separator%s" "$@")
  echo "${joined:1}"
}

# Parse the site name from the $SITES array out of the given
# site URL.
#
# Params: <site url>
function parseSite {
  echo $1 | grep -o "$(join '\|' ${SITES[@]})" | head -1
}

# Build the full list of tags to exclude by prepending the
# site exclusions onto the given list of extra tags.
#
# Params: <currentSite> [tags]
#  - currentSite: the name of the current site as it appears
#                 in the $SITES array above.
#  - tags:        A comma separated list of additional tags
#                 to exclude.
function buildTagExclusions {
  current="${1:?}"
  tags="${2}"
  sites=`echo "${SITES[@]}" | sed "s/ $current\|$current //"`

  credCount=$(echo -n ${credentials} grep -oE '\{\s*"email"' | wc -l);

  if [ $credCount -eq 1 ]; then
    adds='multi-auth'
  elif [ $credCount -eq 0 ]; then
    adds='auth multi-auth'
  fi

  exclusions=`join "," ${sites} ${adds}`

  if [[ ! -z "${tags}" ]]; then
    exclusions="${exclusions},${tags}"
  fi

  echo "${exclusions}"
}

# Interactively retrieve the path to the site
function interactiveSite {
  echo -n "Site URL (with protocol & webepp name): "
  read sitePath
  echo
}

while getopts "a:cd:hlq:s:t:T:u:" opt; do
  case $opt in
    a)
      credTmp+=("$OPTARG")
      ;;
    c)
      preSteps="$preSteps clean"
      ;;
    h)
      printHelp
      exit 0
      ;;
    u)
      sitePath="$OPTARG"
      ;;
    l)
      authType="LEGACY"
      ;;
    q)
      qaAuth="${OPTARG}";
      ;;
    s)
      gradleFlags="${gradleFlags} --tests $OPTARG";
      ;;
    t)
      incTags="$OPTARG";
      ;;
    T)
      exTags="$OPTARG";
      ;;
    D)
      gradleParams="${gradleParams} -D$OPTARG";
      ;;
    \?)
      invalid=1;
      ;;
  esac
done

shift "$(expr $OPTIND - 1)"

# Handle unknown args.
if [ $invalid -eq 1 ]; then
  echo
  printHelp
  exit 1
fi

# Parse input credentials if present
if [ ${#credTmp[@]} -gt 0 ]; then
  credentials=$(pairsToJson $credTmp)
fi

# Request site url if not already provided
if [[ -z "$sitePath" ]]; then
  interactiveSite
fi

# Parse site
SITE_NAME=$(parseSite ${sitePath:?})

# Check if site is known
if [[ -z "$SITE_NAME" ]]; then
  printf "Unknown site '%s'\n" "$sitePath";
  exit 1;
fi

# Build tag whitelist string if include tags are present
if [[ ! -z "$incTags" ]]; then
  incTags="-PincludeTags=$incTags"
fi

CREDENTIALS="${credentials:-[]}" \
  SITE_PATH="${sitePath:?}" \
  AUTH_TYPE="${authType:?}" \
  QA_AUTH="${qaAuth}" \
  ./gradlew ${gradleParams} ${preSteps} test ${gradleFlags} ${incTags} -PexcludeTags="`buildTagExclusions "$SITE_NAME" "$exTags"`" $@
